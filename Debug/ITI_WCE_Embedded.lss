
ITI_WCE_Embedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000060e  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012b4  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001010  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
  7a:	0c 94 05 03 	jmp	0x60a	; 0x60a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_initPin>:

extern  DioDirection_type const Pin_configration[NUM_OF_PINS];


void DIO_initPin(DioPin_type pin,DioDirection_type Direction){
	uint8 port=pin/8;
  82:	98 2f       	mov	r25, r24
  84:	96 95       	lsr	r25
  86:	96 95       	lsr	r25
  88:	96 95       	lsr	r25
	pin=pin%8;
  8a:	48 2f       	mov	r20, r24
  8c:	47 70       	andi	r20, 0x07	; 7
	switch(Direction)////// !!!!!!check the logic for the switch cases!!!!!
  8e:	61 30       	cpi	r22, 0x01	; 1
  90:	39 f0       	breq	.+14     	; 0xa0 <DIO_initPin+0x1e>
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	08 f4       	brcc	.+2      	; 0x98 <DIO_initPin+0x16>
  96:	5a c0       	rjmp	.+180    	; 0x14c <DIO_initPin+0xca>
  98:	62 30       	cpi	r22, 0x02	; 2
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_initPin+0x1c>
  9c:	e9 c0       	rjmp	.+466    	; 0x270 <DIO_initPin+0x1ee>
  9e:	ac c0       	rjmp	.+344    	; 0x1f8 <DIO_initPin+0x176>
	{
	case INPUT_FLOATING :
		switch(port)
  a0:	91 30       	cpi	r25, 0x01	; 1
  a2:	d9 f0       	breq	.+54     	; 0xda <DIO_initPin+0x58>
  a4:	91 30       	cpi	r25, 0x01	; 1
  a6:	30 f0       	brcs	.+12     	; 0xb4 <DIO_initPin+0x32>
  a8:	92 30       	cpi	r25, 0x02	; 2
  aa:	51 f1       	breq	.+84     	; 0x100 <DIO_initPin+0x7e>
  ac:	93 30       	cpi	r25, 0x03	; 3
  ae:	09 f0       	breq	.+2      	; 0xb2 <DIO_initPin+0x30>
  b0:	df c0       	rjmp	.+446    	; 0x270 <DIO_initPin+0x1ee>
  b2:	39 c0       	rjmp	.+114    	; 0x126 <DIO_initPin+0xa4>
		{
		case PA :
			CLEAR_BIT(DDRA,pin);
  b4:	ea e3       	ldi	r30, 0x3A	; 58
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	20 81       	ld	r18, Z
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_initPin+0x42>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	4a 95       	dec	r20
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_initPin+0x3e>
  c8:	80 95       	com	r24
  ca:	28 23       	and	r18, r24
  cc:	20 83       	st	Z, r18
			CLEAR_BIT(PORTA,pin);
  ce:	eb e3       	ldi	r30, 0x3B	; 59
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	20 81       	ld	r18, Z
  d4:	82 23       	and	r24, r18
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret
			break;
		case PB :
			CLEAR_BIT(DDRB,pin);
  da:	e7 e3       	ldi	r30, 0x37	; 55
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	20 81       	ld	r18, Z
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_initPin+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	4a 95       	dec	r20
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_initPin+0x64>
  ee:	80 95       	com	r24
  f0:	28 23       	and	r18, r24
  f2:	20 83       	st	Z, r18
			CLEAR_BIT(PORTB,pin);
  f4:	e8 e3       	ldi	r30, 0x38	; 56
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	20 81       	ld	r18, Z
  fa:	82 23       	and	r24, r18
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret
			break;
		case PC :
			CLEAR_BIT(DDRC,pin);
 100:	e4 e3       	ldi	r30, 0x34	; 52
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	20 81       	ld	r18, Z
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_initPin+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	4a 95       	dec	r20
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_initPin+0x8a>
 114:	80 95       	com	r24
 116:	28 23       	and	r18, r24
 118:	20 83       	st	Z, r18
			CLEAR_BIT(PORTC,pin);
 11a:	e5 e3       	ldi	r30, 0x35	; 53
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	20 81       	ld	r18, Z
 120:	82 23       	and	r24, r18
 122:	80 83       	st	Z, r24
 124:	08 95       	ret
			break;
		case PD :
			CLEAR_BIT(DDRD,pin);
 126:	e1 e3       	ldi	r30, 0x31	; 49
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	20 81       	ld	r18, Z
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_initPin+0xb4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	4a 95       	dec	r20
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_initPin+0xb0>
 13a:	80 95       	com	r24
 13c:	28 23       	and	r18, r24
 13e:	20 83       	st	Z, r18
			CLEAR_BIT(PORTD,pin);
 140:	e2 e3       	ldi	r30, 0x32	; 50
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	20 81       	ld	r18, Z
 146:	82 23       	and	r24, r18
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret
			break;
		}
		break;

		case INPUT_PULLUP:
			switch(port){
 14c:	91 30       	cpi	r25, 0x01	; 1
 14e:	d9 f0       	breq	.+54     	; 0x186 <DIO_initPin+0x104>
 150:	91 30       	cpi	r25, 0x01	; 1
 152:	30 f0       	brcs	.+12     	; 0x160 <DIO_initPin+0xde>
 154:	92 30       	cpi	r25, 0x02	; 2
 156:	51 f1       	breq	.+84     	; 0x1ac <DIO_initPin+0x12a>
 158:	93 30       	cpi	r25, 0x03	; 3
 15a:	09 f0       	breq	.+2      	; 0x15e <DIO_initPin+0xdc>
 15c:	89 c0       	rjmp	.+274    	; 0x270 <DIO_initPin+0x1ee>
 15e:	39 c0       	rjmp	.+114    	; 0x1d2 <DIO_initPin+0x150>
			case PA :
				CLEAR_BIT(DDRA,pin);
 160:	ea e3       	ldi	r30, 0x3A	; 58
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	01 c0       	rjmp	.+2      	; 0x16e <DIO_initPin+0xec>
 16c:	22 0f       	add	r18, r18
 16e:	4a 95       	dec	r20
 170:	ea f7       	brpl	.-6      	; 0x16c <DIO_initPin+0xea>
 172:	82 2f       	mov	r24, r18
 174:	80 95       	com	r24
 176:	89 23       	and	r24, r25
 178:	80 83       	st	Z, r24
				SET_BIT(PORTA,pin);
 17a:	eb e3       	ldi	r30, 0x3B	; 59
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	28 2b       	or	r18, r24
 182:	20 83       	st	Z, r18
 184:	08 95       	ret
				break;
			case PB :
				CLEAR_BIT(DDRB,pin);
 186:	e7 e3       	ldi	r30, 0x37	; 55
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <DIO_initPin+0x112>
 192:	22 0f       	add	r18, r18
 194:	4a 95       	dec	r20
 196:	ea f7       	brpl	.-6      	; 0x192 <DIO_initPin+0x110>
 198:	82 2f       	mov	r24, r18
 19a:	80 95       	com	r24
 19c:	89 23       	and	r24, r25
 19e:	80 83       	st	Z, r24
				SET_BIT(PORTB,pin);
 1a0:	e8 e3       	ldi	r30, 0x38	; 56
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	28 2b       	or	r18, r24
 1a8:	20 83       	st	Z, r18
 1aa:	08 95       	ret
				break;
			case PC :
				CLEAR_BIT(DDRC,pin);
 1ac:	e4 e3       	ldi	r30, 0x34	; 52
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	90 81       	ld	r25, Z
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <DIO_initPin+0x138>
 1b8:	22 0f       	add	r18, r18
 1ba:	4a 95       	dec	r20
 1bc:	ea f7       	brpl	.-6      	; 0x1b8 <DIO_initPin+0x136>
 1be:	82 2f       	mov	r24, r18
 1c0:	80 95       	com	r24
 1c2:	89 23       	and	r24, r25
 1c4:	80 83       	st	Z, r24
				SET_BIT(PORTC,pin);
 1c6:	e5 e3       	ldi	r30, 0x35	; 53
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	28 2b       	or	r18, r24
 1ce:	20 83       	st	Z, r18
 1d0:	08 95       	ret
				break;
			case PD :
				CLEAR_BIT(DDRD,pin);
 1d2:	e1 e3       	ldi	r30, 0x31	; 49
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	90 81       	ld	r25, Z
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <DIO_initPin+0x15e>
 1de:	22 0f       	add	r18, r18
 1e0:	4a 95       	dec	r20
 1e2:	ea f7       	brpl	.-6      	; 0x1de <DIO_initPin+0x15c>
 1e4:	82 2f       	mov	r24, r18
 1e6:	80 95       	com	r24
 1e8:	89 23       	and	r24, r25
 1ea:	80 83       	st	Z, r24
				SET_BIT(PORTD,pin);
 1ec:	e2 e3       	ldi	r30, 0x32	; 50
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	28 2b       	or	r18, r24
 1f4:	20 83       	st	Z, r18
 1f6:	08 95       	ret
			}
			break;


			case OUTPUT:
				switch(port){
 1f8:	91 30       	cpi	r25, 0x01	; 1
 1fa:	a1 f0       	breq	.+40     	; 0x224 <DIO_initPin+0x1a2>
 1fc:	91 30       	cpi	r25, 0x01	; 1
 1fe:	28 f0       	brcs	.+10     	; 0x20a <DIO_initPin+0x188>
 200:	92 30       	cpi	r25, 0x02	; 2
 202:	e9 f0       	breq	.+58     	; 0x23e <DIO_initPin+0x1bc>
 204:	93 30       	cpi	r25, 0x03	; 3
 206:	a1 f5       	brne	.+104    	; 0x270 <DIO_initPin+0x1ee>
 208:	27 c0       	rjmp	.+78     	; 0x258 <DIO_initPin+0x1d6>
				case PA :
					SET_BIT(DDRA,pin);
 20a:	ea e3       	ldi	r30, 0x3A	; 58
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	20 81       	ld	r18, Z
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_initPin+0x198>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	4a 95       	dec	r20
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_initPin+0x194>
 21e:	28 2b       	or	r18, r24
 220:	20 83       	st	Z, r18
 222:	08 95       	ret
					break;
				case PB :
					SET_BIT(DDRB,pin);
 224:	e7 e3       	ldi	r30, 0x37	; 55
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	20 81       	ld	r18, Z
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_initPin+0x1b2>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	4a 95       	dec	r20
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_initPin+0x1ae>
 238:	28 2b       	or	r18, r24
 23a:	20 83       	st	Z, r18
 23c:	08 95       	ret
					break;
				case PC :
					SET_BIT(DDRC,pin);
 23e:	e4 e3       	ldi	r30, 0x34	; 52
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	20 81       	ld	r18, Z
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_initPin+0x1cc>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	4a 95       	dec	r20
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_initPin+0x1c8>
 252:	28 2b       	or	r18, r24
 254:	20 83       	st	Z, r18
 256:	08 95       	ret
					break;
				case PD :
					SET_BIT(DDRD,pin);
 258:	e1 e3       	ldi	r30, 0x31	; 49
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	20 81       	ld	r18, Z
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_initPin+0x1e6>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	4a 95       	dec	r20
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_initPin+0x1e2>
 26c:	28 2b       	or	r18, r24
 26e:	20 83       	st	Z, r18
 270:	08 95       	ret

00000272 <DIO_writepin>:
}

void DIO_writepin (DioPin_type pin,DIO_ValueType value){//write pin value (for input)

	uint8 port=pin/8;
	pin=pin%8;
 272:	38 2f       	mov	r19, r24
 274:	37 70       	andi	r19, 0x07	; 7

	switch(port){
 276:	86 95       	lsr	r24
 278:	86 95       	lsr	r24
 27a:	86 95       	lsr	r24
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	31 f1       	breq	.+76     	; 0x2cc <DIO_writepin+0x5a>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	38 f0       	brcs	.+14     	; 0x292 <DIO_writepin+0x20>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	09 f4       	brne	.+2      	; 0x28a <DIO_writepin+0x18>
 288:	3e c0       	rjmp	.+124    	; 0x306 <DIO_writepin+0x94>
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	09 f0       	breq	.+2      	; 0x290 <DIO_writepin+0x1e>
 28e:	74 c0       	rjmp	.+232    	; 0x378 <DIO_writepin+0x106>
 290:	57 c0       	rjmp	.+174    	; 0x340 <DIO_writepin+0xce>
	case PA:

		if(value){
 292:	66 23       	and	r22, r22
 294:	69 f0       	breq	.+26     	; 0x2b0 <DIO_writepin+0x3e>
			SET_BIT(PORTA,pin);
 296:	eb e3       	ldi	r30, 0x3B	; 59
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	20 81       	ld	r18, Z
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_writepin+0x34>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	3a 95       	dec	r19
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_writepin+0x30>
 2aa:	28 2b       	or	r18, r24
 2ac:	20 83       	st	Z, r18
 2ae:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTA,pin);
 2b0:	eb e3       	ldi	r30, 0x3B	; 59
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	20 81       	ld	r18, Z
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_writepin+0x4e>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	3a 95       	dec	r19
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_writepin+0x4a>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret
		}
		break;
	case PB:
		if(value){
 2cc:	66 23       	and	r22, r22
 2ce:	69 f0       	breq	.+26     	; 0x2ea <DIO_writepin+0x78>
			SET_BIT(PORTB,pin);
 2d0:	e8 e3       	ldi	r30, 0x38	; 56
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	20 81       	ld	r18, Z
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_writepin+0x6e>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	3a 95       	dec	r19
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_writepin+0x6a>
 2e4:	28 2b       	or	r18, r24
 2e6:	20 83       	st	Z, r18
 2e8:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTB,pin);
 2ea:	e8 e3       	ldi	r30, 0x38	; 56
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	20 81       	ld	r18, Z
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_writepin+0x88>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	3a 95       	dec	r19
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_writepin+0x84>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	80 83       	st	Z, r24
 304:	08 95       	ret
		}
		break;
	case PC:
		if(value){
 306:	66 23       	and	r22, r22
 308:	69 f0       	breq	.+26     	; 0x324 <DIO_writepin+0xb2>
			SET_BIT(PORTC,pin);
 30a:	e5 e3       	ldi	r30, 0x35	; 53
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	20 81       	ld	r18, Z
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_writepin+0xa8>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	3a 95       	dec	r19
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_writepin+0xa4>
 31e:	28 2b       	or	r18, r24
 320:	20 83       	st	Z, r18
 322:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTC,pin);
 324:	e5 e3       	ldi	r30, 0x35	; 53
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	20 81       	ld	r18, Z
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_writepin+0xc2>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	3a 95       	dec	r19
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_writepin+0xbe>
 338:	80 95       	com	r24
 33a:	82 23       	and	r24, r18
 33c:	80 83       	st	Z, r24
 33e:	08 95       	ret
		}
		break;
	case PD:
		if(value){
 340:	66 23       	and	r22, r22
 342:	69 f0       	breq	.+26     	; 0x35e <DIO_writepin+0xec>
			SET_BIT(PORTD,pin);
 344:	e2 e3       	ldi	r30, 0x32	; 50
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	20 81       	ld	r18, Z
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_writepin+0xe2>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	3a 95       	dec	r19
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_writepin+0xde>
 358:	28 2b       	or	r18, r24
 35a:	20 83       	st	Z, r18
 35c:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTD,pin);
 35e:	e2 e3       	ldi	r30, 0x32	; 50
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	20 81       	ld	r18, Z
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_writepin+0xfc>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	3a 95       	dec	r19
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_writepin+0xf8>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	80 83       	st	Z, r24
 378:	08 95       	ret

0000037a <DIO_readpin>:

DIO_ValueType DIO_readpin(DioPin_type pin)
{

	uint8 port=pin/8;
	pin=pin%8;
 37a:	48 2f       	mov	r20, r24
 37c:	47 70       	andi	r20, 0x07	; 7

	switch(port){
 37e:	86 95       	lsr	r24
 380:	86 95       	lsr	r24
 382:	86 95       	lsr	r24
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	d1 f0       	breq	.+52     	; 0x3bc <DIO_readpin+0x42>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	30 f0       	brcs	.+12     	; 0x398 <DIO_readpin+0x1e>
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	41 f1       	breq	.+80     	; 0x3e0 <DIO_readpin+0x66>
 390:	83 30       	cpi	r24, 0x03	; 3
 392:	c1 f1       	breq	.+112    	; 0x404 <DIO_readpin+0x8a>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
	case PA:
		return GET_BIT(PORTA,pin);
 398:	2b b3       	in	r18, 0x1b	; 27
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	04 2e       	mov	r0, r20
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_readpin+0x2c>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_readpin+0x28>
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	82 23       	and	r24, r18
 3ae:	93 23       	and	r25, r19
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_readpin+0x3c>
 3b2:	95 95       	asr	r25
 3b4:	87 95       	ror	r24
 3b6:	4a 95       	dec	r20
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_readpin+0x38>
 3ba:	08 95       	ret
		break;
	case PB:
		return GET_BIT(PORTB,pin);
 3bc:	28 b3       	in	r18, 0x18	; 24
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	04 2e       	mov	r0, r20
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_readpin+0x50>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_readpin+0x4c>
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	82 23       	and	r24, r18
 3d2:	93 23       	and	r25, r19
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_readpin+0x60>
 3d6:	95 95       	asr	r25
 3d8:	87 95       	ror	r24
 3da:	4a 95       	dec	r20
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_readpin+0x5c>
 3de:	08 95       	ret
		break;
	case PC:
		return GET_BIT(PORTC,pin);
 3e0:	25 b3       	in	r18, 0x15	; 21
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	04 2e       	mov	r0, r20
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_readpin+0x74>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_readpin+0x70>
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	82 23       	and	r24, r18
 3f6:	93 23       	and	r25, r19
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_readpin+0x84>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	4a 95       	dec	r20
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_readpin+0x80>
 402:	08 95       	ret
		break;
	case PD:
		return GET_BIT(PORTD,pin);
 404:	22 b3       	in	r18, 0x12	; 18
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	04 2e       	mov	r0, r20
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_readpin+0x98>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_readpin+0x94>
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	82 23       	and	r24, r18
 41a:	93 23       	and	r25, r19
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_readpin+0xa8>
 41e:	95 95       	asr	r25
 420:	87 95       	ror	r24
 422:	4a 95       	dec	r20
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_readpin+0xa4>
		return 0;
		break;
	}


}
 426:	08 95       	ret

00000428 <DIO_init>:

void DIO_init(void){
 428:	0f 93       	push	r16
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	c0 e0       	ldi	r28, 0x00	; 0
 432:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<NUM_OF_PINS;i++){


		DIO_initPin(i,Pin_configration[i]);
 434:	00 e7       	ldi	r16, 0x70	; 112
 436:	10 e0       	ldi	r17, 0x00	; 0
 438:	f8 01       	movw	r30, r16
 43a:	ec 0f       	add	r30, r28
 43c:	fd 1f       	adc	r31, r29
 43e:	8c 2f       	mov	r24, r28
 440:	60 81       	ld	r22, Z
 442:	0e 94 41 00 	call	0x82	; 0x82 <DIO_initPin>


}

void DIO_init(void){
	for(int i=0;i<NUM_OF_PINS;i++){
 446:	21 96       	adiw	r28, 0x01	; 1
 448:	c0 32       	cpi	r28, 0x20	; 32
 44a:	d1 05       	cpc	r29, r1
 44c:	a9 f7       	brne	.-22     	; 0x438 <DIO_init+0x10>
		DIO_initPin(i,Pin_configration[i]);


	}

}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <DIO_writeport>:



void DIO_writeport(DioPort_type Port,DIO_ValueType value){

	switch(Port){
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	49 f0       	breq	.+18     	; 0x46e <DIO_writeport+0x16>
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	28 f0       	brcs	.+10     	; 0x46a <DIO_writeport+0x12>
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	39 f0       	breq	.+14     	; 0x472 <DIO_writeport+0x1a>
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	49 f4       	brne	.+18     	; 0x47a <DIO_writeport+0x22>
 468:	06 c0       	rjmp	.+12     	; 0x476 <DIO_writeport+0x1e>
		case PA:
			PORTA=value;
 46a:	6b bb       	out	0x1b, r22	; 27
 46c:	08 95       	ret
			break;
		case PB:
			PORTB=value;
 46e:	68 bb       	out	0x18, r22	; 24
 470:	08 95       	ret
			break;
		case PC:
			PORTC=value;
 472:	65 bb       	out	0x15, r22	; 21
 474:	08 95       	ret
			break;
		case PD:
			PORTD=value;
 476:	62 bb       	out	0x12, r22	; 18
 478:	08 95       	ret
			break;
		default:
			PORTA=0X00;
 47a:	1b ba       	out	0x1b, r1	; 27
 47c:	08 95       	ret

0000047e <LCD_write_command>:
	DIO_writepin(E,LOW);
	_delay_ms(3);

}

void LCD_write_command(uint8 command){
 47e:	ff 92       	push	r15
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	f8 2e       	mov	r15, r24
	DIO_writepin(RS_pin,LOW);//zero for instructions while 1 for DATA
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	0e 94 39 01 	call	0x272	; 0x272 <DIO_writepin>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 48e:	00 ed       	ldi	r16, 0xD0	; 208
 490:	17 e0       	ldi	r17, 0x07	; 7
 492:	c8 01       	movw	r24, r16
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <LCD_write_command+0x16>
	_delay_ms(1);
	DIO_writeport(LCD_PORT, command);//ACTUAL VALUE DISPLAYED ON LCD
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	6f 2d       	mov	r22, r15
 49c:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_writeport>
	DIO_writepin(E,HIGH);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	0e 94 39 01 	call	0x272	; 0x272 <DIO_writepin>
 4a8:	c8 01       	movw	r24, r16
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_write_command+0x2c>
	_delay_ms(1);
	DIO_writepin(E,LOW);
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	0e 94 39 01 	call	0x272	; 0x272 <DIO_writepin>
 4b6:	80 e7       	ldi	r24, 0x70	; 112
 4b8:	97 e1       	ldi	r25, 0x17	; 23
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_write_command+0x3c>
	_delay_ms(3);
}
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	08 95       	ret

000004c6 <LCD_init>:

}



void LCD_init(void){
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	80 e6       	ldi	r24, 0x60	; 96
 4cc:	9a ee       	ldi	r25, 0xEA	; 234
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <LCD_init+0x8>
	_delay_ms(30);
	LCD_write_command(0x38);
 4d2:	88 e3       	ldi	r24, 0x38	; 56
 4d4:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_write_command>
 4d8:	00 ed       	ldi	r16, 0xD0	; 208
 4da:	17 e0       	ldi	r17, 0x07	; 7
 4dc:	c8 01       	movw	r24, r16
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_init+0x18>
	_delay_ms(1);
	LCD_write_command(0x0c);
 4e2:	8c e0       	ldi	r24, 0x0C	; 12
 4e4:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_write_command>
 4e8:	c8 01       	movw	r24, r16
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_init+0x24>
	_delay_ms(1);
	LCD_write_command(0x01);
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_write_command>
 4f4:	80 ea       	ldi	r24, 0xA0	; 160
 4f6:	9f e0       	ldi	r25, 0x0F	; 15
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_init+0x32>
	_delay_ms(2);
}
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	08 95       	ret

00000502 <LCD_goto>:
}


void LCD_goto(int row,int colomn){

	if(row==0){
 502:	89 2b       	or	r24, r25
 504:	29 f4       	brne	.+10     	; 0x510 <LCD_goto+0xe>
		LCD_write_command(command_print+0x00+colomn);
 506:	86 2f       	mov	r24, r22
 508:	80 58       	subi	r24, 0x80	; 128
 50a:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_write_command>
 50e:	08 95       	ret

	}
	else{
		LCD_write_command(command_print+0x40+colomn);
 510:	86 2f       	mov	r24, r22
 512:	80 54       	subi	r24, 0x40	; 64
 514:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_write_command>
 518:	08 95       	ret

0000051a <LCD_write_charachter>:
#define LCD_PORT PB
#define RS_pin 0
#define E    1
#define  command_print 0x80

void LCD_write_charachter(uint8 charachter){
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	f8 2e       	mov	r15, r24
	DIO_writepin(RS_pin,HIGH);//zero for instructions while 1 for DATA
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	0e 94 39 01 	call	0x272	; 0x272 <DIO_writepin>
 52a:	00 ed       	ldi	r16, 0xD0	; 208
 52c:	17 e0       	ldi	r17, 0x07	; 7
 52e:	c8 01       	movw	r24, r16
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <LCD_write_charachter+0x16>
	_delay_ms(1);
	DIO_writeport(LCD_PORT, charachter);//ACTUAL VALUE DISPLAYED ON LCD
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	6f 2d       	mov	r22, r15
 538:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_writeport>
	DIO_writepin(E,HIGH);
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	0e 94 39 01 	call	0x272	; 0x272 <DIO_writepin>
 544:	c8 01       	movw	r24, r16
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <LCD_write_charachter+0x2c>
	_delay_ms(1);
	DIO_writepin(E,LOW);
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	0e 94 39 01 	call	0x272	; 0x272 <DIO_writepin>
 552:	80 e7       	ldi	r24, 0x70	; 112
 554:	97 e1       	ldi	r25, 0x17	; 23
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <LCD_write_charachter+0x3c>
	_delay_ms(3);

}
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	ff 90       	pop	r15
 560:	08 95       	ret

00000562 <ROW_Selector>:


uint8 keys[rows][col]={{1,2,3,4},{5,6,7,8},{9,10,'@','#'},{'%','+','-','*'}};


uint8 ROW_Selector(void){
 562:	df 93       	push	r29
 564:	cf 93       	push	r28
 566:	00 d0       	rcall	.+0      	; 0x568 <ROW_Selector+0x6>
 568:	00 d0       	rcall	.+0      	; 0x56a <ROW_Selector+0x8>
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	uint8 value;
	DioPin_type pins[4]={row0,row1,row2,row3};
 56e:	80 e1       	ldi	r24, 0x10	; 16
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	81 e1       	ldi	r24, 0x11	; 17
 574:	8a 83       	std	Y+2, r24	; 0x02
 576:	82 e1       	ldi	r24, 0x12	; 18
 578:	8b 83       	std	Y+3, r24	; 0x03
 57a:	83 e1       	ldi	r24, 0x13	; 19
 57c:	8c 83       	std	Y+4, r24	; 0x04
 57e:	be 01       	movw	r22, r28
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	fb 01       	movw	r30, r22
	DIO_ValueType ROW_Value;
	for(i=0;i<rows;i++){
		ROW_Value=GET_BIT(port,pins[i]);
		if(!(ROW_Value)){
 586:	a1 e0       	ldi	r26, 0x01	; 1
 588:	b0 e0       	ldi	r27, 0x00	; 0
uint8 ROW_Selector(void){
	uint8 i;
	uint8 value;
	DioPin_type pins[4]={row0,row1,row2,row3};
	DIO_ValueType ROW_Value;
	for(i=0;i<rows;i++){
 58a:	ae 01       	movw	r20, r28
 58c:	4b 5f       	subi	r20, 0xFB	; 251
 58e:	5f 4f       	sbci	r21, 0xFF	; 255


uint8 ROW_Selector(void){
	uint8 i;
	uint8 value;
	DioPin_type pins[4]={row0,row1,row2,row3};
 590:	3e 2f       	mov	r19, r30
 592:	36 1b       	sub	r19, r22
	DIO_ValueType ROW_Value;
	for(i=0;i<rows;i++){
		ROW_Value=GET_BIT(port,pins[i]);
 594:	20 81       	ld	r18, Z
		if(!(ROW_Value)){
 596:	cd 01       	movw	r24, r26
 598:	02 2e       	mov	r0, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <ROW_Selector+0x3e>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <ROW_Selector+0x3a>
 5a4:	82 70       	andi	r24, 0x02	; 2
 5a6:	90 70       	andi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <ROW_Selector+0x4c>
 5aa:	95 95       	asr	r25
 5ac:	87 95       	ror	r24
 5ae:	2a 95       	dec	r18
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <ROW_Selector+0x48>
 5b2:	88 23       	and	r24, r24
 5b4:	11 f4       	brne	.+4      	; 0x5ba <ROW_Selector+0x58>
 5b6:	83 2f       	mov	r24, r19
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <ROW_Selector+0x60>
 5ba:	31 96       	adiw	r30, 0x01	; 1
uint8 ROW_Selector(void){
	uint8 i;
	uint8 value;
	DioPin_type pins[4]={row0,row1,row2,row3};
	DIO_ValueType ROW_Value;
	for(i=0;i<rows;i++){
 5bc:	e4 17       	cp	r30, r20
 5be:	f5 07       	cpc	r31, r21
 5c0:	39 f7       	brne	.-50     	; 0x590 <ROW_Selector+0x2e>
		}

	}
	return value;

}
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	cf 91       	pop	r28
 5cc:	df 91       	pop	r29
 5ce:	08 95       	ret

000005d0 <KEY_PAD>:
	 COL1 =GET_BIT(port,col1);
	 COL2=GET_BIT(port,col2);
	 COL3=GET_BIT(port,col3);
	if(!COL0){
		COLOMN_COORDINATES=0;
		ROW_COORDINATES=ROW_Selector();
 5d0:	0e 94 b1 02 	call	0x562	; 0x562 <ROW_Selector>
 5d4:	e8 2f       	mov	r30, r24
 5d6:	80 e6       	ldi	r24, 0x60	; 96
 5d8:	9a ee       	ldi	r25, 0xEA	; 234
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <KEY_PAD+0xa>
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	ee 0f       	add	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	ee 0f       	add	r30, r30
 5e6:	ff 1f       	adc	r31, r31
 5e8:	e0 5a       	subi	r30, 0xA0	; 160
 5ea:	ff 4f       	sbci	r31, 0xFF	; 255




}
}
 5ec:	80 81       	ld	r24, Z
 5ee:	08 95       	ret

000005f0 <main>:
//al_LCD

int main(){


	DIO_init();
 5f0:	0e 94 14 02 	call	0x428	; 0x428 <DIO_init>

	LCD_init();
 5f4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_init>
	LCD_goto(2,3);
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	63 e0       	ldi	r22, 0x03	; 3
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	0e 94 81 02 	call	0x502	; 0x502 <LCD_goto>
	//		LCD_write_charachter(name[i]);
		//}
	//}


}
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	08 95       	ret

0000060a <_exit>:
 60a:	f8 94       	cli

0000060c <__stop_program>:
 60c:	ff cf       	rjmp	.-2      	; 0x60c <__stop_program>
