
ITI_WCE_Embedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000008c6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800098  00800098  00000992  2**0
                  ALLOC
  3 .stab         00001b30  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000154a  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_1>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 04 	call	0x898	; 0x898 <main>
  8a:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <STATUS_REGISTER_enable_disable>:
  92:	88 23       	and	r24, r24
  94:	19 f0       	breq	.+6      	; 0x9c <STATUS_REGISTER_enable_disable+0xa>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	61 f4       	brne	.+24     	; 0xb2 <STATUS_REGISTER_enable_disable+0x20>
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <STATUS_REGISTER_enable_disable+0x16>
  9c:	ef e5       	ldi	r30, 0x5F	; 95
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8f 77       	andi	r24, 0x7F	; 127
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret
  a8:	ef e5       	ldi	r30, 0x5F	; 95
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <sense_edit>:
}


void sense_edit(INT_Type INTN,Sense_Control_Type type){

	switch(type)
  b4:	61 30       	cpi	r22, 0x01	; 1
  b6:	f9 f0       	breq	.+62     	; 0xf6 <sense_edit+0x42>
  b8:	61 30       	cpi	r22, 0x01	; 1
  ba:	30 f0       	brcs	.+12     	; 0xc8 <sense_edit+0x14>
  bc:	62 30       	cpi	r22, 0x02	; 2
  be:	89 f1       	breq	.+98     	; 0x122 <sense_edit+0x6e>
  c0:	63 30       	cpi	r22, 0x03	; 3
  c2:	09 f0       	breq	.+2      	; 0xc6 <sense_edit+0x12>
  c4:	59 c0       	rjmp	.+178    	; 0x178 <sense_edit+0xc4>
  c6:	43 c0       	rjmp	.+134    	; 0x14e <sense_edit+0x9a>
	{

	case 0:
		switch(INTN)
  c8:	88 23       	and	r24, r24
  ca:	61 f0       	breq	.+24     	; 0xe4 <sense_edit+0x30>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	09 f0       	breq	.+2      	; 0xd2 <sense_edit+0x1e>
  d0:	53 c0       	rjmp	.+166    	; 0x178 <sense_edit+0xc4>
		{
		case 1:
			CLEAR_BIT(MCUCR,3);
  d2:	e5 e5       	ldi	r30, 0x55	; 85
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	80 83       	st	Z, r24
			CLEAR_BIT(MCUCR,2);
  dc:	80 81       	ld	r24, Z
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret
			break;
		case 0:
			CLEAR_BIT(MCUCR,1);
  e4:	e5 e5       	ldi	r30, 0x55	; 85
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	80 83       	st	Z, r24
			CLEAR_BIT(MCUCR,0);
  ee:	80 81       	ld	r24, Z
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret
		}

		break;

		case 1:
			switch(INTN)
  f6:	88 23       	and	r24, r24
  f8:	59 f0       	breq	.+22     	; 0x110 <sense_edit+0x5c>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	e9 f5       	brne	.+122    	; 0x178 <sense_edit+0xc4>
			{
			case 1:
				CLEAR_BIT(MCUCR,3);
  fe:	e5 e5       	ldi	r30, 0x55	; 85
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	80 83       	st	Z, r24
				SET_BIT(MCUCR,2);
 108:	80 81       	ld	r24, Z
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret
				break;
			case 0:
				CLEAR_BIT(MCUCR,1);
 110:	e5 e5       	ldi	r30, 0x55	; 85
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	80 83       	st	Z, r24
				SET_BIT(MCUCR,0);
 11a:	80 81       	ld	r24, Z
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret
				break;
			}
			break;
			case 2:
				switch(INTN)
 122:	88 23       	and	r24, r24
 124:	59 f0       	breq	.+22     	; 0x13c <sense_edit+0x88>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	39 f5       	brne	.+78     	; 0x178 <sense_edit+0xc4>
				{
				case 1:
					SET_BIT(MCUCR,3);
 12a:	e5 e5       	ldi	r30, 0x55	; 85
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 60       	ori	r24, 0x08	; 8
 132:	80 83       	st	Z, r24
					CLEAR_BIT(MCUCR,2);
 134:	80 81       	ld	r24, Z
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret
					break;
				case 0:
					SET_BIT(MCUCR,1);
 13c:	e5 e5       	ldi	r30, 0x55	; 85
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
					CLEAR_BIT(MCUCR,0);
 146:	80 81       	ld	r24, Z
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret
					break;
				}
				break;
				case 3:
					switch(INTN)
 14e:	88 23       	and	r24, r24
 150:	59 f0       	breq	.+22     	; 0x168 <sense_edit+0xb4>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	89 f4       	brne	.+34     	; 0x178 <sense_edit+0xc4>
					{
					case 1:
						SET_BIT(MCUCR,3);
 156:	e5 e5       	ldi	r30, 0x55	; 85
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	80 83       	st	Z, r24
						SET_BIT(MCUCR,2);
 160:	80 81       	ld	r24, Z
 162:	84 60       	ori	r24, 0x04	; 4
 164:	80 83       	st	Z, r24
 166:	08 95       	ret
						break;
					case 0:
						SET_BIT(MCUCR,1);
 168:	e5 e5       	ldi	r30, 0x55	; 85
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	80 83       	st	Z, r24
						SET_BIT(MCUCR,0);
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <general_REGISTER_I_SELECTOR>:
	SET_BIT(MCUCR,3);
	CLEAR_BIT(MCUCR,2);

	SET_BIT(GICR,7);
*/
	 sei();
 17a:	78 94       	sei

	switch(INTN){
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	71 f0       	breq	.+28     	; 0x19c <general_REGISTER_I_SELECTOR+0x22>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	18 f0       	brcs	.+6      	; 0x18a <general_REGISTER_I_SELECTOR+0x10>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	29 f5       	brne	.+74     	; 0x1d2 <general_REGISTER_I_SELECTOR+0x58>
 188:	12 c0       	rjmp	.+36     	; 0x1ae <general_REGISTER_I_SELECTOR+0x34>
	case 0:
		SET_BIT(GICR,6);
 18a:	eb e5       	ldi	r30, 0x5B	; 91
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 83       	st	Z, r24
		sense_edit(INTN,type);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 5a 00 	call	0xb4	; 0xb4 <sense_edit>
 19a:	08 95       	ret
		break;
	case 1:
		SET_BIT(GICR,7);
 19c:	eb e5       	ldi	r30, 0x5B	; 91
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24

		sense_edit(INTN,type);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 5a 00 	call	0xb4	; 0xb4 <sense_edit>
 1ac:	08 95       	ret

		break;
	case 2:
		SET_BIT(GICR,5);
 1ae:	eb e5       	ldi	r30, 0x5B	; 91
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	80 83       	st	Z, r24
		if(type==2){
 1b8:	62 30       	cpi	r22, 0x02	; 2
 1ba:	31 f4       	brne	.+12     	; 0x1c8 <general_REGISTER_I_SELECTOR+0x4e>
			CLEAR_BIT(MCUCSR,6);
 1bc:	e4 e5       	ldi	r30, 0x54	; 84
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 7b       	andi	r24, 0xBF	; 191
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret
		}
		else{

			SET_BIT(MCUCSR,6);
 1c8:	e4 e5       	ldi	r30, 0x54	; 84
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	80 83       	st	Z, r24
 1d2:	08 95       	ret

000001d4 <Set_callback_0>:


void  Set_callback_0( void(*func)(void))
{

	EXTI0_ptr_0 = func;
 1d4:	90 93 99 00 	sts	0x0099, r25
 1d8:	80 93 98 00 	sts	0x0098, r24
}
 1dc:	08 95       	ret

000001de <Set_callback_1>:
void  Set_callback_1( void (*func) (void) )
{

	EXTI0_ptr_1 = func;
 1de:	90 93 9b 00 	sts	0x009B, r25
 1e2:	80 93 9a 00 	sts	0x009A, r24
}
 1e6:	08 95       	ret

000001e8 <Set_callback_2>:
void  Set_callback_2(void(*func)(void))
{

	EXTI0_ptr_2 = func;
 1e8:	90 93 9d 00 	sts	0x009D, r25
 1ec:	80 93 9c 00 	sts	0x009C, r24
}
 1f0:	08 95       	ret

000001f2 <__vector_1>:

ISR(INT0_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	EXTI0_ptr_0();
 214:	e0 91 98 00 	lds	r30, 0x0098
 218:	f0 91 99 00 	lds	r31, 0x0099
 21c:	09 95       	icall
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_2>:


ISR(INT1_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	EXTI0_ptr_1();
 262:	e0 91 9a 00 	lds	r30, 0x009A
 266:	f0 91 9b 00 	lds	r31, 0x009B
 26a:	09 95       	icall
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <DIO_initPin>:

extern  DioDirection_type const Pin_configration[NUM_OF_PINS];


void DIO_initPin(DioPin_type pin,DioDirection_type Direction){
	uint8 port=pin/8;
 28e:	98 2f       	mov	r25, r24
 290:	96 95       	lsr	r25
 292:	96 95       	lsr	r25
 294:	96 95       	lsr	r25
	pin=pin%8;
 296:	48 2f       	mov	r20, r24
 298:	47 70       	andi	r20, 0x07	; 7
	switch(Direction)////// !!!!!!check the logic for the switch cases!!!!!
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	39 f0       	breq	.+14     	; 0x2ac <DIO_initPin+0x1e>
 29e:	61 30       	cpi	r22, 0x01	; 1
 2a0:	08 f4       	brcc	.+2      	; 0x2a4 <DIO_initPin+0x16>
 2a2:	5a c0       	rjmp	.+180    	; 0x358 <DIO_initPin+0xca>
 2a4:	62 30       	cpi	r22, 0x02	; 2
 2a6:	09 f0       	breq	.+2      	; 0x2aa <DIO_initPin+0x1c>
 2a8:	e9 c0       	rjmp	.+466    	; 0x47c <DIO_initPin+0x1ee>
 2aa:	ac c0       	rjmp	.+344    	; 0x404 <DIO_initPin+0x176>
	{
	case INPUT_FLOATING :
		switch(port)
 2ac:	91 30       	cpi	r25, 0x01	; 1
 2ae:	d9 f0       	breq	.+54     	; 0x2e6 <DIO_initPin+0x58>
 2b0:	91 30       	cpi	r25, 0x01	; 1
 2b2:	30 f0       	brcs	.+12     	; 0x2c0 <DIO_initPin+0x32>
 2b4:	92 30       	cpi	r25, 0x02	; 2
 2b6:	51 f1       	breq	.+84     	; 0x30c <DIO_initPin+0x7e>
 2b8:	93 30       	cpi	r25, 0x03	; 3
 2ba:	09 f0       	breq	.+2      	; 0x2be <DIO_initPin+0x30>
 2bc:	df c0       	rjmp	.+446    	; 0x47c <DIO_initPin+0x1ee>
 2be:	39 c0       	rjmp	.+114    	; 0x332 <DIO_initPin+0xa4>
		{
		case PA :
			CLEAR_BIT(DDRA,pin);
 2c0:	ea e3       	ldi	r30, 0x3A	; 58
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	20 81       	ld	r18, Z
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_initPin+0x42>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	4a 95       	dec	r20
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_initPin+0x3e>
 2d4:	80 95       	com	r24
 2d6:	28 23       	and	r18, r24
 2d8:	20 83       	st	Z, r18
			CLEAR_BIT(PORTA,pin);
 2da:	eb e3       	ldi	r30, 0x3B	; 59
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	20 81       	ld	r18, Z
 2e0:	82 23       	and	r24, r18
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret
			break;
		case PB :
			CLEAR_BIT(DDRB,pin);
 2e6:	e7 e3       	ldi	r30, 0x37	; 55
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	20 81       	ld	r18, Z
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_initPin+0x68>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	4a 95       	dec	r20
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_initPin+0x64>
 2fa:	80 95       	com	r24
 2fc:	28 23       	and	r18, r24
 2fe:	20 83       	st	Z, r18
			CLEAR_BIT(PORTB,pin);
 300:	e8 e3       	ldi	r30, 0x38	; 56
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	20 81       	ld	r18, Z
 306:	82 23       	and	r24, r18
 308:	80 83       	st	Z, r24
 30a:	08 95       	ret
			break;
		case PC :
			CLEAR_BIT(DDRC,pin);
 30c:	e4 e3       	ldi	r30, 0x34	; 52
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	20 81       	ld	r18, Z
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_initPin+0x8e>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	4a 95       	dec	r20
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_initPin+0x8a>
 320:	80 95       	com	r24
 322:	28 23       	and	r18, r24
 324:	20 83       	st	Z, r18
			CLEAR_BIT(PORTC,pin);
 326:	e5 e3       	ldi	r30, 0x35	; 53
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	20 81       	ld	r18, Z
 32c:	82 23       	and	r24, r18
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret
			break;
		case PD :
			CLEAR_BIT(DDRD,pin);
 332:	e1 e3       	ldi	r30, 0x31	; 49
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	20 81       	ld	r18, Z
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_initPin+0xb4>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	4a 95       	dec	r20
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_initPin+0xb0>
 346:	80 95       	com	r24
 348:	28 23       	and	r18, r24
 34a:	20 83       	st	Z, r18
			CLEAR_BIT(PORTD,pin);
 34c:	e2 e3       	ldi	r30, 0x32	; 50
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	20 81       	ld	r18, Z
 352:	82 23       	and	r24, r18
 354:	80 83       	st	Z, r24
 356:	08 95       	ret
			break;
		}
		break;

		case INPUT_PULLUP:
			switch(port){
 358:	91 30       	cpi	r25, 0x01	; 1
 35a:	d9 f0       	breq	.+54     	; 0x392 <DIO_initPin+0x104>
 35c:	91 30       	cpi	r25, 0x01	; 1
 35e:	30 f0       	brcs	.+12     	; 0x36c <DIO_initPin+0xde>
 360:	92 30       	cpi	r25, 0x02	; 2
 362:	51 f1       	breq	.+84     	; 0x3b8 <DIO_initPin+0x12a>
 364:	93 30       	cpi	r25, 0x03	; 3
 366:	09 f0       	breq	.+2      	; 0x36a <DIO_initPin+0xdc>
 368:	89 c0       	rjmp	.+274    	; 0x47c <DIO_initPin+0x1ee>
 36a:	39 c0       	rjmp	.+114    	; 0x3de <DIO_initPin+0x150>
			case PA :
				CLEAR_BIT(DDRA,pin);
 36c:	ea e3       	ldi	r30, 0x3A	; 58
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	90 81       	ld	r25, Z
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	01 c0       	rjmp	.+2      	; 0x37a <DIO_initPin+0xec>
 378:	22 0f       	add	r18, r18
 37a:	4a 95       	dec	r20
 37c:	ea f7       	brpl	.-6      	; 0x378 <DIO_initPin+0xea>
 37e:	82 2f       	mov	r24, r18
 380:	80 95       	com	r24
 382:	89 23       	and	r24, r25
 384:	80 83       	st	Z, r24
				SET_BIT(PORTA,pin);
 386:	eb e3       	ldi	r30, 0x3B	; 59
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	28 2b       	or	r18, r24
 38e:	20 83       	st	Z, r18
 390:	08 95       	ret
				break;
			case PB :
				CLEAR_BIT(DDRB,pin);
 392:	e7 e3       	ldi	r30, 0x37	; 55
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	90 81       	ld	r25, Z
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <DIO_initPin+0x112>
 39e:	22 0f       	add	r18, r18
 3a0:	4a 95       	dec	r20
 3a2:	ea f7       	brpl	.-6      	; 0x39e <DIO_initPin+0x110>
 3a4:	82 2f       	mov	r24, r18
 3a6:	80 95       	com	r24
 3a8:	89 23       	and	r24, r25
 3aa:	80 83       	st	Z, r24
				SET_BIT(PORTB,pin);
 3ac:	e8 e3       	ldi	r30, 0x38	; 56
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	28 2b       	or	r18, r24
 3b4:	20 83       	st	Z, r18
 3b6:	08 95       	ret
				break;
			case PC :
				CLEAR_BIT(DDRC,pin);
 3b8:	e4 e3       	ldi	r30, 0x34	; 52
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	90 81       	ld	r25, Z
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <DIO_initPin+0x138>
 3c4:	22 0f       	add	r18, r18
 3c6:	4a 95       	dec	r20
 3c8:	ea f7       	brpl	.-6      	; 0x3c4 <DIO_initPin+0x136>
 3ca:	82 2f       	mov	r24, r18
 3cc:	80 95       	com	r24
 3ce:	89 23       	and	r24, r25
 3d0:	80 83       	st	Z, r24
				SET_BIT(PORTC,pin);
 3d2:	e5 e3       	ldi	r30, 0x35	; 53
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	28 2b       	or	r18, r24
 3da:	20 83       	st	Z, r18
 3dc:	08 95       	ret
				break;
			case PD :
				CLEAR_BIT(DDRD,pin);
 3de:	e1 e3       	ldi	r30, 0x31	; 49
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	90 81       	ld	r25, Z
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <DIO_initPin+0x15e>
 3ea:	22 0f       	add	r18, r18
 3ec:	4a 95       	dec	r20
 3ee:	ea f7       	brpl	.-6      	; 0x3ea <DIO_initPin+0x15c>
 3f0:	82 2f       	mov	r24, r18
 3f2:	80 95       	com	r24
 3f4:	89 23       	and	r24, r25
 3f6:	80 83       	st	Z, r24
				SET_BIT(PORTD,pin);
 3f8:	e2 e3       	ldi	r30, 0x32	; 50
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	28 2b       	or	r18, r24
 400:	20 83       	st	Z, r18
 402:	08 95       	ret
			}
			break;


			case OUTPUT:
				switch(port){
 404:	91 30       	cpi	r25, 0x01	; 1
 406:	a1 f0       	breq	.+40     	; 0x430 <DIO_initPin+0x1a2>
 408:	91 30       	cpi	r25, 0x01	; 1
 40a:	28 f0       	brcs	.+10     	; 0x416 <DIO_initPin+0x188>
 40c:	92 30       	cpi	r25, 0x02	; 2
 40e:	e9 f0       	breq	.+58     	; 0x44a <DIO_initPin+0x1bc>
 410:	93 30       	cpi	r25, 0x03	; 3
 412:	a1 f5       	brne	.+104    	; 0x47c <DIO_initPin+0x1ee>
 414:	27 c0       	rjmp	.+78     	; 0x464 <DIO_initPin+0x1d6>
				case PA :
					SET_BIT(DDRA,pin);
 416:	ea e3       	ldi	r30, 0x3A	; 58
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	20 81       	ld	r18, Z
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_initPin+0x198>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	4a 95       	dec	r20
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_initPin+0x194>
 42a:	28 2b       	or	r18, r24
 42c:	20 83       	st	Z, r18
 42e:	08 95       	ret
					break;
				case PB :
					SET_BIT(DDRB,pin);
 430:	e7 e3       	ldi	r30, 0x37	; 55
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	20 81       	ld	r18, Z
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_initPin+0x1b2>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	4a 95       	dec	r20
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_initPin+0x1ae>
 444:	28 2b       	or	r18, r24
 446:	20 83       	st	Z, r18
 448:	08 95       	ret
					break;
				case PC :
					SET_BIT(DDRC,pin);
 44a:	e4 e3       	ldi	r30, 0x34	; 52
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	20 81       	ld	r18, Z
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_initPin+0x1cc>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	4a 95       	dec	r20
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_initPin+0x1c8>
 45e:	28 2b       	or	r18, r24
 460:	20 83       	st	Z, r18
 462:	08 95       	ret
					break;
				case PD :
					SET_BIT(DDRD,pin);
 464:	e1 e3       	ldi	r30, 0x31	; 49
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	20 81       	ld	r18, Z
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_initPin+0x1e6>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	4a 95       	dec	r20
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_initPin+0x1e2>
 478:	28 2b       	or	r18, r24
 47a:	20 83       	st	Z, r18
 47c:	08 95       	ret

0000047e <DIO_writepin>:
}

void DIO_writepin (DioPin_type pin,DIO_ValueType value){//write pin value (for input)

	uint8 port=pin/8;
	pin=pin%8;
 47e:	38 2f       	mov	r19, r24
 480:	37 70       	andi	r19, 0x07	; 7

	switch(port){
 482:	86 95       	lsr	r24
 484:	86 95       	lsr	r24
 486:	86 95       	lsr	r24
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	31 f1       	breq	.+76     	; 0x4d8 <DIO_writepin+0x5a>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	38 f0       	brcs	.+14     	; 0x49e <DIO_writepin+0x20>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	09 f4       	brne	.+2      	; 0x496 <DIO_writepin+0x18>
 494:	3e c0       	rjmp	.+124    	; 0x512 <DIO_writepin+0x94>
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	09 f0       	breq	.+2      	; 0x49c <DIO_writepin+0x1e>
 49a:	74 c0       	rjmp	.+232    	; 0x584 <DIO_writepin+0x106>
 49c:	57 c0       	rjmp	.+174    	; 0x54c <DIO_writepin+0xce>
	case PA:

		if(value){
 49e:	66 23       	and	r22, r22
 4a0:	69 f0       	breq	.+26     	; 0x4bc <DIO_writepin+0x3e>
			SET_BIT(PORTA,pin);
 4a2:	eb e3       	ldi	r30, 0x3B	; 59
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	20 81       	ld	r18, Z
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_writepin+0x34>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	3a 95       	dec	r19
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_writepin+0x30>
 4b6:	28 2b       	or	r18, r24
 4b8:	20 83       	st	Z, r18
 4ba:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTA,pin);
 4bc:	eb e3       	ldi	r30, 0x3B	; 59
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	20 81       	ld	r18, Z
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_writepin+0x4e>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	3a 95       	dec	r19
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_writepin+0x4a>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	80 83       	st	Z, r24
 4d6:	08 95       	ret
		}
		break;
	case PB:
		if(value){
 4d8:	66 23       	and	r22, r22
 4da:	69 f0       	breq	.+26     	; 0x4f6 <DIO_writepin+0x78>
			SET_BIT(PORTB,pin);
 4dc:	e8 e3       	ldi	r30, 0x38	; 56
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	20 81       	ld	r18, Z
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_writepin+0x6e>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	3a 95       	dec	r19
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_writepin+0x6a>
 4f0:	28 2b       	or	r18, r24
 4f2:	20 83       	st	Z, r18
 4f4:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTB,pin);
 4f6:	e8 e3       	ldi	r30, 0x38	; 56
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	20 81       	ld	r18, Z
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_writepin+0x88>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	3a 95       	dec	r19
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_writepin+0x84>
 50a:	80 95       	com	r24
 50c:	82 23       	and	r24, r18
 50e:	80 83       	st	Z, r24
 510:	08 95       	ret
		}
		break;
	case PC:
		if(value){
 512:	66 23       	and	r22, r22
 514:	69 f0       	breq	.+26     	; 0x530 <DIO_writepin+0xb2>
			SET_BIT(PORTC,pin);
 516:	e5 e3       	ldi	r30, 0x35	; 53
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	20 81       	ld	r18, Z
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_writepin+0xa8>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	3a 95       	dec	r19
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_writepin+0xa4>
 52a:	28 2b       	or	r18, r24
 52c:	20 83       	st	Z, r18
 52e:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTC,pin);
 530:	e5 e3       	ldi	r30, 0x35	; 53
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	20 81       	ld	r18, Z
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_writepin+0xc2>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	3a 95       	dec	r19
 542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_writepin+0xbe>
 544:	80 95       	com	r24
 546:	82 23       	and	r24, r18
 548:	80 83       	st	Z, r24
 54a:	08 95       	ret
		}
		break;
	case PD:
		if(value){
 54c:	66 23       	and	r22, r22
 54e:	69 f0       	breq	.+26     	; 0x56a <DIO_writepin+0xec>
			SET_BIT(PORTD,pin);
 550:	e2 e3       	ldi	r30, 0x32	; 50
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	20 81       	ld	r18, Z
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_writepin+0xe2>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	3a 95       	dec	r19
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_writepin+0xde>
 564:	28 2b       	or	r18, r24
 566:	20 83       	st	Z, r18
 568:	08 95       	ret
		}
		else{
			CLEAR_BIT(PORTD,pin);
 56a:	e2 e3       	ldi	r30, 0x32	; 50
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	20 81       	ld	r18, Z
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_writepin+0xfc>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	3a 95       	dec	r19
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_writepin+0xf8>
 57e:	80 95       	com	r24
 580:	82 23       	and	r24, r18
 582:	80 83       	st	Z, r24
 584:	08 95       	ret

00000586 <DIO_readpin>:

DIO_ValueType DIO_readpin(DioPin_type pin)
{

	uint8 port=pin/8;
	pin=pin%8;
 586:	48 2f       	mov	r20, r24
 588:	47 70       	andi	r20, 0x07	; 7

	switch(port){
 58a:	86 95       	lsr	r24
 58c:	86 95       	lsr	r24
 58e:	86 95       	lsr	r24
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	d1 f0       	breq	.+52     	; 0x5c8 <DIO_readpin+0x42>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	30 f0       	brcs	.+12     	; 0x5a4 <DIO_readpin+0x1e>
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	41 f1       	breq	.+80     	; 0x5ec <DIO_readpin+0x66>
 59c:	83 30       	cpi	r24, 0x03	; 3
 59e:	c1 f1       	breq	.+112    	; 0x610 <DIO_readpin+0x8a>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	08 95       	ret
	case PA:
		return GET_BIT(PORTA,pin);
 5a4:	2b b3       	in	r18, 0x1b	; 27
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	04 2e       	mov	r0, r20
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_readpin+0x2c>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_readpin+0x28>
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	82 23       	and	r24, r18
 5ba:	93 23       	and	r25, r19
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_readpin+0x3c>
 5be:	95 95       	asr	r25
 5c0:	87 95       	ror	r24
 5c2:	4a 95       	dec	r20
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_readpin+0x38>
 5c6:	08 95       	ret
		break;
	case PB:
		return GET_BIT(PORTB,pin);
 5c8:	28 b3       	in	r18, 0x18	; 24
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	04 2e       	mov	r0, r20
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_readpin+0x50>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_readpin+0x4c>
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	82 23       	and	r24, r18
 5de:	93 23       	and	r25, r19
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_readpin+0x60>
 5e2:	95 95       	asr	r25
 5e4:	87 95       	ror	r24
 5e6:	4a 95       	dec	r20
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_readpin+0x5c>
 5ea:	08 95       	ret
		break;
	case PC:
		return GET_BIT(PORTC,pin);
 5ec:	25 b3       	in	r18, 0x15	; 21
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	04 2e       	mov	r0, r20
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_readpin+0x74>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_readpin+0x70>
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	82 23       	and	r24, r18
 602:	93 23       	and	r25, r19
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_readpin+0x84>
 606:	95 95       	asr	r25
 608:	87 95       	ror	r24
 60a:	4a 95       	dec	r20
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_readpin+0x80>
 60e:	08 95       	ret
		break;
	case PD:
		return GET_BIT(PORTD,pin);
 610:	22 b3       	in	r18, 0x12	; 18
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	04 2e       	mov	r0, r20
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_readpin+0x98>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_readpin+0x94>
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	82 23       	and	r24, r18
 626:	93 23       	and	r25, r19
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_readpin+0xa8>
 62a:	95 95       	asr	r25
 62c:	87 95       	ror	r24
 62e:	4a 95       	dec	r20
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_readpin+0xa4>
		return 0;
		break;
	}


}
 632:	08 95       	ret

00000634 <DIO_init>:

void DIO_init(void){
 634:	0f 93       	push	r16
 636:	1f 93       	push	r17
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	c0 e0       	ldi	r28, 0x00	; 0
 63e:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<NUM_OF_PINS;i++){


		DIO_initPin(i,Pin_configration[i]);
 640:	00 e6       	ldi	r16, 0x60	; 96
 642:	10 e0       	ldi	r17, 0x00	; 0
 644:	f8 01       	movw	r30, r16
 646:	ec 0f       	add	r30, r28
 648:	fd 1f       	adc	r31, r29
 64a:	8c 2f       	mov	r24, r28
 64c:	60 81       	ld	r22, Z
 64e:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_initPin>


}

void DIO_init(void){
	for(int i=0;i<NUM_OF_PINS;i++){
 652:	21 96       	adiw	r28, 0x01	; 1
 654:	c0 32       	cpi	r28, 0x20	; 32
 656:	d1 05       	cpc	r29, r1
 658:	a9 f7       	brne	.-22     	; 0x644 <DIO_init+0x10>
		DIO_initPin(i,Pin_configration[i]);


	}

}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	08 95       	ret

00000664 <DIO_writeport>:



void DIO_writeport(DioPort_type Port,DIO_ValueType value){

	switch(Port){
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	49 f0       	breq	.+18     	; 0x67a <DIO_writeport+0x16>
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	28 f0       	brcs	.+10     	; 0x676 <DIO_writeport+0x12>
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	39 f0       	breq	.+14     	; 0x67e <DIO_writeport+0x1a>
 670:	83 30       	cpi	r24, 0x03	; 3
 672:	49 f4       	brne	.+18     	; 0x686 <DIO_writeport+0x22>
 674:	06 c0       	rjmp	.+12     	; 0x682 <DIO_writeport+0x1e>
		case PA:
			PORTA=value;
 676:	6b bb       	out	0x1b, r22	; 27
 678:	08 95       	ret
			break;
		case PB:
			PORTB=value;
 67a:	68 bb       	out	0x18, r22	; 24
 67c:	08 95       	ret
			break;
		case PC:
			PORTC=value;
 67e:	65 bb       	out	0x15, r22	; 21
 680:	08 95       	ret
			break;
		case PD:
			PORTD=value;
 682:	62 bb       	out	0x12, r22	; 18
 684:	08 95       	ret
			break;
		default:
			PORTA=0X00;
 686:	1b ba       	out	0x1b, r1	; 27
 688:	08 95       	ret

0000068a <LCD_write_command>:
	DIO_writepin(E,LOW);
	_delay_ms(3);

}

void LCD_write_command(uint8 command){
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	f8 2e       	mov	r15, r24
	DIO_writepin(RS_pin,LOW);//zero for instructions while 1 for DATA
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 69a:	00 ed       	ldi	r16, 0xD0	; 208
 69c:	17 e0       	ldi	r17, 0x07	; 7
 69e:	c8 01       	movw	r24, r16
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCD_write_command+0x16>
	_delay_ms(1);
	DIO_writeport(LCD_PORT, command);//ACTUAL VALUE DISPLAYED ON LCD
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	6f 2d       	mov	r22, r15
 6a8:	0e 94 32 03 	call	0x664	; 0x664 <DIO_writeport>
	DIO_writepin(E,HIGH);
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 6b4:	c8 01       	movw	r24, r16
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_write_command+0x2c>
	_delay_ms(1);
	DIO_writepin(E,LOW);
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 6c2:	80 e7       	ldi	r24, 0x70	; 112
 6c4:	97 e1       	ldi	r25, 0x17	; 23
 6c6:	01 97       	sbiw	r24, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <LCD_write_command+0x3c>
	_delay_ms(3);
}
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	08 95       	ret

000006d2 <LCD_init>:

}



void LCD_init(void){
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	80 e6       	ldi	r24, 0x60	; 96
 6d8:	9a ee       	ldi	r25, 0xEA	; 234
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <LCD_init+0x8>
	_delay_ms(30);
	LCD_write_command(0x38);
 6de:	88 e3       	ldi	r24, 0x38	; 56
 6e0:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_write_command>
 6e4:	00 ed       	ldi	r16, 0xD0	; 208
 6e6:	17 e0       	ldi	r17, 0x07	; 7
 6e8:	c8 01       	movw	r24, r16
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_init+0x18>
	_delay_ms(1);
	LCD_write_command(0x0c);
 6ee:	8c e0       	ldi	r24, 0x0C	; 12
 6f0:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_write_command>
 6f4:	c8 01       	movw	r24, r16
 6f6:	01 97       	sbiw	r24, 0x01	; 1
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <LCD_init+0x24>
	_delay_ms(1);
	LCD_write_command(0x01);
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_write_command>
 700:	80 ea       	ldi	r24, 0xA0	; 160
 702:	9f e0       	ldi	r25, 0x0F	; 15
 704:	01 97       	sbiw	r24, 0x01	; 1
 706:	f1 f7       	brne	.-4      	; 0x704 <LCD_init+0x32>
	_delay_ms(2);
}
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	08 95       	ret

0000070e <LCD_goto>:
}


void LCD_goto(int row,int colomn){

	if(row==0){
 70e:	89 2b       	or	r24, r25
 710:	29 f4       	brne	.+10     	; 0x71c <LCD_goto+0xe>
		LCD_write_command(command_print+0x00+colomn);
 712:	86 2f       	mov	r24, r22
 714:	80 58       	subi	r24, 0x80	; 128
 716:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_write_command>
 71a:	08 95       	ret

	}
	else{
		LCD_write_command(command_print+0x40+colomn);
 71c:	86 2f       	mov	r24, r22
 71e:	80 54       	subi	r24, 0x40	; 64
 720:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_write_command>
 724:	08 95       	ret

00000726 <LCD_write_charachter>:
#define LCD_PORT PB
#define RS_pin 0
#define E    1
#define  command_print 0x80

void LCD_write_charachter(uint8 charachter){
 726:	ff 92       	push	r15
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	f8 2e       	mov	r15, r24
	DIO_writepin(RS_pin,HIGH);//zero for instructions while 1 for DATA
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 736:	00 ed       	ldi	r16, 0xD0	; 208
 738:	17 e0       	ldi	r17, 0x07	; 7
 73a:	c8 01       	movw	r24, r16
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_write_charachter+0x16>
	_delay_ms(1);
	DIO_writeport(LCD_PORT, charachter);//ACTUAL VALUE DISPLAYED ON LCD
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	6f 2d       	mov	r22, r15
 744:	0e 94 32 03 	call	0x664	; 0x664 <DIO_writeport>
	DIO_writepin(E,HIGH);
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 750:	c8 01       	movw	r24, r16
 752:	01 97       	sbiw	r24, 0x01	; 1
 754:	f1 f7       	brne	.-4      	; 0x752 <LCD_write_charachter+0x2c>
	_delay_ms(1);
	DIO_writepin(E,LOW);
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 75e:	80 e7       	ldi	r24, 0x70	; 112
 760:	97 e1       	ldi	r25, 0x17	; 23
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <LCD_write_charachter+0x3c>
	_delay_ms(3);

}
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	08 95       	ret

0000076e <KEYPAD_init>:
extern const uint8 ROW[NUM_OF_ROWS];
extern const uint8 COL[NUM_OF_COLS];
extern const uint8 KEYS[NUM_OF_ROWS][NUM_OF_COLS];

void  KEYPAD_init()
{
 76e:	ef 92       	push	r14
 770:	ff 92       	push	r15
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
	for(int row_index=0; row_index<NUM_OF_ROWS ; row_index++)
	{
		DIO_writepin(ROW[row_index],HIGH);
 776:	0f 2e       	mov	r0, r31
 778:	f0 e8       	ldi	r31, 0x80	; 128
 77a:	ef 2e       	mov	r14, r31
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	ff 2e       	mov	r15, r31
 780:	f0 2d       	mov	r31, r0
 782:	f7 01       	movw	r30, r14
 784:	81 91       	ld	r24, Z+
 786:	8f 01       	movw	r16, r30
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 78e:	f8 01       	movw	r30, r16
 790:	80 81       	ld	r24, Z
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 798:	f7 01       	movw	r30, r14
 79a:	82 81       	ldd	r24, Z+2	; 0x02
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 7a2:	f7 01       	movw	r30, r14
 7a4:	83 81       	ldd	r24, Z+3	; 0x03
 7a6:	61 e0       	ldi	r22, 0x01	; 1
 7a8:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>

	}

}
 7ac:	1f 91       	pop	r17
 7ae:	0f 91       	pop	r16
 7b0:	ff 90       	pop	r15
 7b2:	ef 90       	pop	r14
 7b4:	08 95       	ret

000007b6 <KEYPAD_get_key>:

uint8 KEYPAD_get_key()
{
 7b6:	4f 92       	push	r4
 7b8:	5f 92       	push	r5
 7ba:	6f 92       	push	r6
 7bc:	7f 92       	push	r7
 7be:	8f 92       	push	r8
 7c0:	9f 92       	push	r9
 7c2:	af 92       	push	r10
 7c4:	bf 92       	push	r11
 7c6:	cf 92       	push	r12
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	00 e8       	ldi	r16, 0x80	; 128
 7d8:	10 e0       	ldi	r17, 0x00	; 0
 7da:	c8 e8       	ldi	r28, 0x88	; 136
 7dc:	d0 e0       	ldi	r29, 0x00	; 0
 7de:	ff 24       	eor	r15, r15
	for(int row_index=0; row_index<NUM_OF_ROWS ; row_index++)
	{
		DIO_writepin(ROW[row_index],LOW);
		for(int col_index=0; col_index<NUM_OF_COLS ; col_index++)
		{
			if(DIO_readpin(COL[col_index]) == 0)
 7e0:	0f 2e       	mov	r0, r31
 7e2:	f4 e8       	ldi	r31, 0x84	; 132
 7e4:	4f 2e       	mov	r4, r31
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	5f 2e       	mov	r5, r31
 7ea:	f0 2d       	mov	r31, r0
 7ec:	0f 2e       	mov	r0, r31
 7ee:	f5 e8       	ldi	r31, 0x85	; 133
 7f0:	6f 2e       	mov	r6, r31
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	7f 2e       	mov	r7, r31
 7f6:	f0 2d       	mov	r31, r0
 7f8:	0f 2e       	mov	r0, r31
 7fa:	f6 e8       	ldi	r31, 0x86	; 134
 7fc:	8f 2e       	mov	r8, r31
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	9f 2e       	mov	r9, r31
 802:	f0 2d       	mov	r31, r0
 804:	0f 2e       	mov	r0, r31
 806:	f7 e8       	ldi	r31, 0x87	; 135
 808:	af 2e       	mov	r10, r31
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	bf 2e       	mov	r11, r31
 80e:	f0 2d       	mov	r31, r0
}

uint8 KEYPAD_get_key()
{
	uint8 pressed_key = 0;
	for(int row_index=0; row_index<NUM_OF_ROWS ; row_index++)
 810:	0f 2e       	mov	r0, r31
 812:	f4 e8       	ldi	r31, 0x84	; 132
 814:	cf 2e       	mov	r12, r31
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	df 2e       	mov	r13, r31
 81a:	f0 2d       	mov	r31, r0
	{
		DIO_writepin(ROW[row_index],LOW);
 81c:	f8 01       	movw	r30, r16
 81e:	e0 80       	ld	r14, Z
 820:	8e 2d       	mov	r24, r14
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
		for(int col_index=0; col_index<NUM_OF_COLS ; col_index++)
		{
			if(DIO_readpin(COL[col_index]) == 0)
 828:	f2 01       	movw	r30, r4
 82a:	80 81       	ld	r24, Z
 82c:	0e 94 c3 02 	call	0x586	; 0x586 <DIO_readpin>
 830:	88 23       	and	r24, r24
 832:	09 f4       	brne	.+2      	; 0x836 <KEYPAD_get_key+0x80>
			{
				pressed_key =  KEYS[row_index][col_index];
 834:	f8 80       	ld	r15, Y
	for(int row_index=0; row_index<NUM_OF_ROWS ; row_index++)
	{
		DIO_writepin(ROW[row_index],LOW);
		for(int col_index=0; col_index<NUM_OF_COLS ; col_index++)
		{
			if(DIO_readpin(COL[col_index]) == 0)
 836:	f3 01       	movw	r30, r6
 838:	80 81       	ld	r24, Z
 83a:	0e 94 c3 02 	call	0x586	; 0x586 <DIO_readpin>
 83e:	88 23       	and	r24, r24
 840:	09 f4       	brne	.+2      	; 0x844 <KEYPAD_get_key+0x8e>
			{
				pressed_key =  KEYS[row_index][col_index];
 842:	f9 80       	ldd	r15, Y+1	; 0x01
	for(int row_index=0; row_index<NUM_OF_ROWS ; row_index++)
	{
		DIO_writepin(ROW[row_index],LOW);
		for(int col_index=0; col_index<NUM_OF_COLS ; col_index++)
		{
			if(DIO_readpin(COL[col_index]) == 0)
 844:	f4 01       	movw	r30, r8
 846:	80 81       	ld	r24, Z
 848:	0e 94 c3 02 	call	0x586	; 0x586 <DIO_readpin>
 84c:	88 23       	and	r24, r24
 84e:	09 f4       	brne	.+2      	; 0x852 <KEYPAD_get_key+0x9c>
			{
				pressed_key =  KEYS[row_index][col_index];
 850:	fa 80       	ldd	r15, Y+2	; 0x02
	for(int row_index=0; row_index<NUM_OF_ROWS ; row_index++)
	{
		DIO_writepin(ROW[row_index],LOW);
		for(int col_index=0; col_index<NUM_OF_COLS ; col_index++)
		{
			if(DIO_readpin(COL[col_index]) == 0)
 852:	f5 01       	movw	r30, r10
 854:	80 81       	ld	r24, Z
 856:	0e 94 c3 02 	call	0x586	; 0x586 <DIO_readpin>
 85a:	88 23       	and	r24, r24
 85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
			{
				pressed_key =  KEYS[row_index][col_index];
 85e:	fb 80       	ldd	r15, Y+3	; 0x03
			}
		}
		DIO_writepin(ROW[row_index],HIGH);
 860:	8e 2d       	mov	r24, r14
 862:	61 e0       	ldi	r22, 0x01	; 1
 864:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 868:	0f 5f       	subi	r16, 0xFF	; 255
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	24 96       	adiw	r28, 0x04	; 4
}

uint8 KEYPAD_get_key()
{
	uint8 pressed_key = 0;
	for(int row_index=0; row_index<NUM_OF_ROWS ; row_index++)
 86e:	0c 15       	cp	r16, r12
 870:	1d 05       	cpc	r17, r13
 872:	a1 f6       	brne	.-88     	; 0x81c <KEYPAD_get_key+0x66>
		}
		DIO_writepin(ROW[row_index],HIGH);
	}

	return pressed_key;
}
 874:	8f 2d       	mov	r24, r15
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	1f 91       	pop	r17
 87c:	0f 91       	pop	r16
 87e:	ff 90       	pop	r15
 880:	ef 90       	pop	r14
 882:	df 90       	pop	r13
 884:	cf 90       	pop	r12
 886:	bf 90       	pop	r11
 888:	af 90       	pop	r10
 88a:	9f 90       	pop	r9
 88c:	8f 90       	pop	r8
 88e:	7f 90       	pop	r7
 890:	6f 90       	pop	r6
 892:	5f 90       	pop	r5
 894:	4f 90       	pop	r4
 896:	08 95       	ret

00000898 <main>:
	}
}
int main(){


	DIO_init();
 898:	0e 94 1a 03 	call	0x634	; 0x634 <DIO_init>
	STATUS_REGISTER_enable_disable(G_I_ON);
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	0e 94 49 00 	call	0x92	; 0x92 <STATUS_REGISTER_enable_disable>
	general_REGISTER_I_SELECTOR(INT1,Falling_Edge);
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	62 e0       	ldi	r22, 0x02	; 2
 8a6:	0e 94 bd 00 	call	0x17a	; 0x17a <general_REGISTER_I_SELECTOR>
	Set_callback_1(Interupt_action);
 8aa:	8c e5       	ldi	r24, 0x5C	; 92
 8ac:	94 e0       	ldi	r25, 0x04	; 4
 8ae:	0e 94 ef 00 	call	0x1de	; 0x1de <Set_callback_1>
	//		LCD_write_charachter(name[i]);
		//}
	//}


}
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	08 95       	ret

000008b8 <Interupt_action>:
//al_LCD


void Interupt_action(void){
	while(1){
	DIO_writepin(12,HIGH);
 8b8:	8c e0       	ldi	r24, 0x0C	; 12
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_writepin>
 8c0:	fb cf       	rjmp	.-10     	; 0x8b8 <Interupt_action>

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
